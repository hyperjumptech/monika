(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[676],{4536:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/guides/examples",function(){return t(6846)}])},6846:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p},meta:function(){return o}});t(7294);var s=t(3905),a=t(8470);function i(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o={id:"examples",title:"Examples"},r={meta:o},l=function(e){var n=e.children,t=i(e,["children"]);return(0,s.kt)(a.C,Object.assign({meta:o},t),n)};function p(e){var n=e.components,t=i(e,["components"]);return(0,s.kt)(l,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",Object.assign({},{id:"minimal-configuration"}),"Minimal Configuration",(0,s.kt)("a",Object.assign({parentName:"h2"},{href:"#minimal-configuration",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"At minimum, you only need to specify the ",(0,s.kt)("inlineCode",{parentName:"p"},"url")," you want to monitor. For example to monitor ",(0,s.kt)("inlineCode",{parentName:"p"},"github.com"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - requests:\n      - url: https://github.com\n")),(0,s.kt)("p",null,"If you didn't define the http method, it will use the GET method by default. Please note that with this configuration, you will not get any notifications when the site github.com is down since the notification configuration is not defined."),(0,s.kt)("h2",Object.assign({},{id:"enabling-notification"}),"Enabling Notification",(0,s.kt)("a",Object.assign({parentName:"h2"},{href:"#enabling-notification",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"Probes are more useful with notifications enabled to alert when something is amiss. The following is an example configuration to get notification via e-mail when an incident occurs:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"notifications:\n  - id: unique-id-smtp\n    type: smtp\n    data:\n      recipients:\n        - YOUR_EMAIL_ADDRESS_HERE\n      hostname: smtp.gmail.com\n      port: 587\n      username: YOUR_GMAIL_ACCOUNT\n      password: YOUR_GMAIL_PASSWORD_OR_APP_PASSWORD\nprobes:\n  - id: '1'\n    name: Monika Landing Page\n    description: Landing page of awesome Monika\n    interval: 10 # in seconds\n    requests:\n      - url: https://hyperjumptech.github.io/monika\n        timeout: 7000 # in milliseconds\n    alerts:\n      - assertion: response.status < 200 or response.status > 299\n        message: Target is not healthy. It has not been returning status code 2xx.\n      - assertion: response.time > 2000 # in milliseconds\n        message:\n          Target is not healthy. The response time has been greater than 2000\n          ms.\n")),(0,s.kt)("p",null,"Using the above configuration, Monika will check the landing page every 10 seconds and will send a notification by email when the landing page is down 5 times in a row. For more information about available notification channels, refer to ",(0,s.kt)("a",Object.assign({parentName:"p"},{href:"https://hyperjumptech.github.io/monika/guides/notifications"}),"Notifications"),"."),(0,s.kt)("h2",Object.assign({},{id:"html-form-submission-example"}),"HTML Form Submission Example",(0,s.kt)("a",Object.assign({parentName:"h2"},{href:"#html-form-submission-example",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"You can also send POST requests using Monika. The following is an example of sending a POST request to simulate HTML form submission."),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - id: '1'\n    name: HTML form submission\n    description: simulate html form submission\n    interval: 10 # in seconds\n    requests:\n      - method: POST\n        url: http://www.example.com/login.php\n        timeout: 7000 # in milliseconds\n        headers:\n          Content-Type: application/x-www-form-urlencoded\n        body:\n          username: someusername\n          password: somepassword\n")),(0,s.kt)("p",null,"Using the configuration above, Monika will send a POST request to ",(0,s.kt)("inlineCode",{parentName:"p"},"http://www.example.com/login.php")," with the defined request's body."),(0,s.kt)("h2",Object.assign({},{id:"multiple-requests"}),"Multiple requests",(0,s.kt)("a",Object.assign({parentName:"h2"},{href:"#multiple-requests",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"Monika supports sending multiple requests ",(0,s.kt)("strong",{parentName:"p"},"one after another")," in a single probe. Below is one such configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - id: '1'\n    name: Simulate form submit\n    description: simulate html form submission\n    interval: 15 # in seconds\n    requests:\n      - method: GET\n        url: https://github.com/\n        timeout: 7000 # in milliseconds\n        saveBody: false\n      - method: GET\n        url: https://github.com/hyperjumptech\n        timeout: 7000 # in milliseconds\n        saveBody: true\n    alerts:\n      - assertion: response.status > 299\n        message: Target is not healthy. It has not been returning status code 2xx.\n      - assertion: response.time > 2000 # in milliseconds\n        message:\n          Target is not healthy. The response time has been greater than 2000\n          ms.\n")),(0,s.kt)("p",null,"In the configuration above, Monika will first check ",(0,s.kt)("inlineCode",{parentName:"p"},"https://github.com/")," then ",(0,s.kt)("inlineCode",{parentName:"p"},"https://github.com/hyperjumptech"),". If the status code of ",(0,s.kt)("inlineCode",{parentName:"p"},"https://github.com/")," is not 2xx (e.g., 200, 201), Monika ",(0,s.kt)("strong",{parentName:"p"},"will not")," check ",(0,s.kt)("inlineCode",{parentName:"p"},"https://github.com/hyperjumptech"),"."),(0,s.kt)("p",null,"If there is a case where executing a GET request to ",(0,s.kt)("inlineCode",{parentName:"p"},"https://github.com")," triggers an alert, the next request will not be executed."),(0,s.kt)("h2",Object.assign({},{id:"requests-chaining"}),"Requests Chaining",(0,s.kt)("a",Object.assign({parentName:"h2"},{href:"#requests-chaining",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"Monika supports request chaining, which enables you to do multiple requests and the ability to use past responses from earlier requests. For example, after executing a GET request to a certain API, the next request could use the previous request(s) response into their path/assertion parameters or headers."),(0,s.kt)("p",null,"Here is an example on how you could get previous request(s) response data into your next request:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"{{ responses.[0].status }} ==> Get status code from first request response\n{{ responses.[1].body.token }} ==> Get token from second request response\n{{ responses.[2].headers.SetCookie[0] }} ==> Get first cookie from third request response\n")),(0,s.kt)("p",null,"In the example above, ",(0,s.kt)("inlineCode",{parentName:"p"},"responses.[0]")," refers to the response from the first request in the probe, ",(0,s.kt)("inlineCode",{parentName:"p"},"responses.[1]")," refers to the response from the second request in the probe, and so on. Please note that you can only use the response from previous requests in the same probe."),(0,s.kt)("p",null,"Please refer to ",(0,s.kt)("a",Object.assign({parentName:"p"},{href:"https://hyperjumptech.github.io/monika/guides/probes#probe-response-anatomy"}),"Probe Response Anatomy")," in order to know which value could be used from the response body for the next request(s)."),(0,s.kt)("p",null,"In the sections below, you can find several examples of configuration files which contain chaining requests."),(0,s.kt)("h3",Object.assign({},{id:"pass-response-data-as-pathquery-parameters"}),"Pass Response Data as Path/Query Parameters",(0,s.kt)("a",Object.assign({parentName:"h3"},{href:"#pass-response-data-as-pathquery-parameters",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"Here is an example of using previous request's response in the path/assertion parameters:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - id: '1'\n    name: Simulate form submit\n    description: simulate html form submission\n    interval: 15 # in seconds\n    requests:\n      - method: GET\n        url: https://reqres.in/api/users\n        timeout: 7000 # in milliseconds\n      - method: GET\n        url: https://reqres.in/api/users/{{ responses.[0].body.data.[0].id }}\n        timeout: 7000 # in milliseconds\n    alerts:\n      - assertion: response.status > 299\n        message: Target is not healthy. It has not been returning status code 2xx.\n      - assertion: response.time > 2000 # in milliseconds\n        message:\n          Target is not healthy. The response time has been greater than 2000\n          ms.\n")),(0,s.kt)("p",null,"In the configuration above, the first request will fetch all users from ",(0,s.kt)("inlineCode",{parentName:"p"},"https://reqres.in/api/users"),". Then in the second request, Monika will fetch the details of the first user from the first request. If there are no triggered alerts, the response returned from the first request is ready to be used by the second request using values from ",(0,s.kt)("inlineCode",{parentName:"p"},"{{ responses.[0].body }}"),"."),(0,s.kt)("p",null,"Let's say the response from fetching all users in JSON format is as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "page": 2,\n  "per_page": 6,\n  "total": 12,\n  "total_pages": 2,\n  "data": [\n    {\n        "id": 7,\n        "email": "michael.lawson@reqres.in",\n        "first_name": "Michael",\n        "last_name": "Lawson",\n        "avatar": "https://reqres.in/img/faces/7-image.jpg"\n    },\n    ...\n  ]\n}\n')),(0,s.kt)("p",null,"To use the user ID of the first user in the second request, we define the url of the second request as ",(0,s.kt)("inlineCode",{parentName:"p"},"{{ responses.[0].body.data.[0].id }}"),"."),(0,s.kt)("h3",Object.assign({},{id:"pass-response-data-as-headers-value"}),"Pass Response Data as Headers value",(0,s.kt)("a",Object.assign({parentName:"h3"},{href:"#pass-response-data-as-headers-value",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"Here is an example of using previous request's response in the headers:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - id: '1'\n    name: Simulate form submit\n    description: simulate html form submission\n    interval: 15 # in seconds\n    requests:\n      - method: POST\n        url: https://reqres.in/api/login\n        timeout: 7000 # in milliseconds\n        body:\n          email: eve.holt@reqres.in\n          password: cityslicka\n      - method: POST\n        url: https://reqres.in/api/users/\n        timeout: 7000 # in milliseconds\n        body:\n          name: morpheus\n          job: leader\n        headers:\n          Authorization: Bearer {{ responses.[0].body.token }}\n    alerts:\n      - assertion: response.status > 299\n        message: Target is not healthy. It has not been returning status code 2xx.\n      - assertion: response.time > 2000 # in milliseconds\n        message:\n          Target is not healthy. The response time has been greater than 2000\n          ms.\n")),(0,s.kt)("p",null,"Using the above configuration, Monika will perform a login request in the first request, then use the returned token in the Authorization header of the second request."),(0,s.kt)("h3",Object.assign({},{id:"pass-response-data-to-request-body"}),"Pass Response Data to Request Body",(0,s.kt)("a",Object.assign({parentName:"h3"},{href:"#pass-response-data-to-request-body",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"Continuing with the examples from ",(0,s.kt)("a",Object.assign({parentName:"p"},{href:"http://www.reqres.in"}),"www.reqres.in")," above, say we would like to use the previous GET request to perform a POST /login. If the data from the initial request is something like below:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "data":\n    {\n      "id": 1,\n      "email": "george.bluth@reqres.in",\n      "first_name": "George",\n      "last_name": "Bluth",\n      "avatar": "https://reqres.in/img/faces/1-image.jpg"\n    },\n  ....\n}\n')),(0,s.kt)("p",null,"Then you can use the user's email in the login request body as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - id: probe-01\n    name: 'body from response'\n    interval: 15 # in seconds\n\n    requests:\n      - url: https://reqres.in/api/users/1\n        method: GET\n        timeout: 5000 # in milliseconds\n        saveBody: false\n        headers:\n          Content-Type: application/json; charset=utf-8\n\n      - url: https://reqres.in/api/login\n        method: POST\n        timeout: 1000 # in milliseconds\n        headers:\n          Content-Type: application/json; charset=utf-8\n        body:\n          email: '{{ responses.[0].body.data.email }}'\n          password: password\n\n        alerts:\n          - assertion: response.status != 200\n            message: Http Response status code is not 200!\nnotifications:\n  - id: unique-id-desktop\n    type: desktop\n")),(0,s.kt)("p",null,"Note: Please do not forget the single quotes before and after the opening and closing double braces to explicitly indicate a string value. YAML parsers will generate warnings without it."),(0,s.kt)("h3",Object.assign({},{id:"errors-in-request-chaining"}),"Errors in Request Chaining",(0,s.kt)("a",Object.assign({parentName:"h3"},{href:"#errors-in-request-chaining",title:"Direct link to heading",className:"anchor"}),(0,s.kt)("span",Object.assign({parentName:"a"},{className:"icon icon-link"})))),(0,s.kt)("p",null,"In a request chaining mode, if one request fails, Monika ",(0,s.kt)("strong",{parentName:"p"},"does not")," continue with the next request in the probe. The reasoning is that, if an earlier request, say a GET /token fails, it would be pointless to continue and fetch /userdata."),(0,s.kt)("p",null,"If you want to continue the next request even when the first one fails, we recommend putting your requests in multiple probes, something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"probes:\n  - id: get-user\n    name: 'get-user'\n    description: login and check user app data\n    interval: 30\n    requests:\n      - url: https://example.com/token\n        body: {user: 'xxxx', password: 'yyyy'}\n        method: POST\n      - url: https://example.com/userdata\n        method: GET\n        headers:\n          Authorization: Bearer {{ responses.[0].body.accessToken }}\n\n  - id: get-mail\n    name: 'get-mail'\n    description: fetching user emails\n    interval: 30\n    requests:\n      - url: https://example.com/token\n        body: {user: 'xxxx', password: 'yyyy'}\n        method: POST\n        timeout: 10000\n        method: POST\n      - url: https://example.com/usermail\n        method: GET\n        headers:\n          Authorization: Bearer {{ responses.[0].body.accessToken }}\n\n")),(0,s.kt)("p",null,"In the example above, the get-email will run even if get-user has failed."))}p.isMDXComponent=!0}},function(e){e.O(0,[547,778,470,774,888,179],(function(){return n=4536,e(e.s=n);var n}));var n=e.O();_N_E=n}]);