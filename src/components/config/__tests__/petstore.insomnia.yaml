_type: export
__export_format: 4
__export_date: 2022-01-05T06:54:45.331Z
__export_source: insomnia.desktop.app:v2021.7.2
resources:
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6523acbe44
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641196273388
    created: 1641195562173
    url: '{{ base_url }}/pet'
    name: Add a new pet to the store
    description: ''
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "id": 10,
          "name": "doggie",
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "photoUrls": [
            "string"
          ],
          "tags": [
            {
              "id": 0,
              "name": "string"
            }
          ],
          "status": "string"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
        id: pair_3ade684a900c4a33ab96cc51362c5257
    authentication: {}
    metaSortKey: -1641195562173
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    parentId: wrk_a255aeabb44240f5885e3360f9a6ee65
    modified: 1641195562179
    created: 1641195562179
    name: pet
    description: Everything about your Pets
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1641195562179
    _type: request_group
  - _id: wrk_a255aeabb44240f5885e3360f9a6ee65
    parentId: null
    modified: 1641195565868
    created: 1641195565868
    name: Swagger Petstore - OpenAPI 3.0 1.0.9
    description: >-
      This is a sample Pet Store Server based on the OpenAPI 3.0
      specification.  You can find out more about

      Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!

      You can now help us improve the API whether it's by making changes to the definition itself or to the code.

      That way, with time, we can improve the API in general, and expose some of the new features in OAS3.


      Some useful links:

      - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)

      - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
    scope: collection
    _type: workspace
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6574a7a059
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641196278825
    created: 1641195562172
    url: '{{ base_url }}/pet'
    name: Update an existing pet
    description: ''
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "id": 10,
          "name": "doggie",
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "photoUrls": [
            "string"
          ],
          "tags": [
            {
              "id": 0,
              "name": "string"
            }
          ],
          "status": "string"
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
        id: pair_f2d1606381bd419aa1c2414c1af2c688
    authentication: {}
    metaSortKey: -1641195562172
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6580ab0d08
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641196293753
    created: 1641195562170
    url: '{{ base_url }}/pet/findByStatus?status=available'
    name: Finds Pets by status
    description: ''
    method: GET
    body: {}
    parameters:
      - name: status
        disabled: true
        value: available
        id: pair_1ff33812c2c3485aba0f2d0bf41ed0b5
    headers: []
    authentication: {}
    metaSortKey: -1641195562170
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6542a17980
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641195562168
    created: 1641195562168
    url: '{{ base_url }}/pet/findByTags'
    name: Finds Pets by tags
    description: ''
    method: GET
    body: {}
    parameters:
      - name: tags
        disabled: true
        value: string
    headers: []
    authentication: {}
    metaSortKey: -1641195562168
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee653d1a51d3
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641195562165
    created: 1641195562165
    url: '{{ base_url }}/pet/{{ petId }}'
    name: Find pet by ID
    description: ''
    method: GET
    body: {}
    parameters: []
    headers:
      - name: api_key
        disabled: false
        value: '{{ apiKey }}'
    authentication: {}
    metaSortKey: -1641195562165
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65a4608701
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641195562164
    created: 1641195562164
    url: '{{ base_url }}/pet/{{ petId }}'
    name: Updates a pet in the store with form data
    description: ''
    method: POST
    body: {}
    parameters:
      - name: name
        disabled: true
        value: string
      - name: status
        disabled: true
        value: string
    headers: []
    authentication: {}
    metaSortKey: -1641195562164
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65e804bd05
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641195562163
    created: 1641195562163
    url: '{{ base_url }}/pet/{{ petId }}'
    name: Deletes a pet
    description: ''
    method: DELETE
    body: {}
    parameters: []
    headers:
      - name: api_key
        disabled: true
        value: string
    authentication: {}
    metaSortKey: -1641195562163
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee658081fb6f
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee651b034c38
    modified: 1641195562160
    created: 1641195562160
    url: '{{ base_url }}/pet/{{ petId }}/uploadImage'
    name: uploads an image
    description: ''
    method: POST
    body:
      mimeType: application/octet-stream
    parameters:
      - name: additionalMetadata
        disabled: true
        value: string
    headers: []
    authentication: {}
    metaSortKey: -1641195562160
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65443ac9e7
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee653a21295d
    modified: 1641195562159
    created: 1641195562159
    url: '{{ base_url }}/store/inventory'
    name: Returns pet inventories by status
    description: ''
    method: GET
    body: {}
    parameters: []
    headers:
      - name: api_key
        disabled: false
        value: '{{ apiKey }}'
    authentication: {}
    metaSortKey: -1641195562159
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_wrk_a255aeabb44240f5885e3360f9a6ee653a21295d
    parentId: wrk_a255aeabb44240f5885e3360f9a6ee65
    modified: 1641195562178
    created: 1641195562178
    name: store
    description: Access to Petstore orders
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1641195562178
    _type: request_group
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65e24a4f9e
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee653a21295d
    modified: 1641195562158
    created: 1641195562158
    url: '{{ base_url }}/store/order'
    name: Place an order for a pet
    description: ''
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "id": 10,
          "petId": 198772,
          "quantity": 7,
          "shipDate": "2022-01-03T07:39:22.140Z",
          "status": "approved",
          "complete": true
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1641195562158
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65f021bcd3
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee653a21295d
    modified: 1641195562155
    created: 1641195562155
    url: '{{ base_url }}/store/order/{{ orderId }}'
    name: Find purchase order by ID
    description: ''
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1641195562155
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6515e47538
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee653a21295d
    modified: 1641195562154
    created: 1641195562154
    url: '{{ base_url }}/store/order/{{ orderId }}'
    name: Delete purchase order by ID
    description: ''
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1641195562154
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65fe3d55d0
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562152
    created: 1641195562152
    url: '{{ base_url }}/user'
    name: Create user
    description: ''
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "id": 10,
          "username": "theUser",
          "firstName": "John",
          "lastName": "James",
          "email": "john@email.com",
          "password": 12345,
          "phone": 12345,
          "userStatus": 1
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1641195562152
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    parentId: wrk_a255aeabb44240f5885e3360f9a6ee65
    modified: 1641195562176
    created: 1641195562176
    name: user
    description: Operations about user
    environment: {}
    environmentPropertyOrder: null
    metaSortKey: -1641195562176
    _type: request_group
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65e94a615f
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562150
    created: 1641195562150
    url: '{{ base_url }}/user/createWithList'
    name: Creates list of users with given input array
    description: ''
    method: POST
    body:
      mimeType: application/json
      text: |-
        [
          {
            "id": 10,
            "username": "theUser",
            "firstName": "John",
            "lastName": "James",
            "email": "john@email.com",
            "password": 12345,
            "phone": 12345,
            "userStatus": 1
          }
        ]
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1641195562150
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6500ac9da2
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562148
    created: 1641195562148
    url: '{{ base_url }}/user/login'
    name: Logs user into the system
    description: ''
    method: GET
    body: {}
    parameters:
      - name: username
        disabled: true
        value: string
      - name: password
        disabled: true
        value: string
    headers: []
    authentication: {}
    metaSortKey: -1641195562148
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee65740025cb
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562147
    created: 1641195562147
    url: '{{ base_url }}/user/logout'
    name: Logs out current logged in user session
    description: ''
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1641195562147
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6574f1d1d1
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562146
    created: 1641195562146
    url: '{{ base_url }}/user/{{ username }}'
    name: Get user by user name
    description: ''
    method: GET
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1641195562146
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee656d74493f
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562144
    created: 1641195562144
    url: '{{ base_url }}/user/{{ username }}'
    name: Update user
    description: ''
    method: PUT
    body:
      mimeType: application/json
      text: |-
        {
          "id": 10,
          "username": "theUser",
          "firstName": "John",
          "lastName": "James",
          "email": "john@email.com",
          "password": 12345,
          "phone": 12345,
          "userStatus": 1
        }
    parameters: []
    headers:
      - name: Content-Type
        value: application/json
    authentication: {}
    metaSortKey: -1641195562144
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_wrk_a255aeabb44240f5885e3360f9a6ee6538e8e88f
    parentId: fld_wrk_a255aeabb44240f5885e3360f9a6ee6512dea96f
    modified: 1641195562143
    created: 1641195562143
    url: '{{ base_url }}/user/{{ username }}'
    name: Delete user
    description: ''
    method: DELETE
    body: {}
    parameters: []
    headers: []
    authentication: {}
    metaSortKey: -1641195562143
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: env_e36ff964c604633ac012e67acde4790806dc20c8
    parentId: wrk_a255aeabb44240f5885e3360f9a6ee65
    modified: 1641195562182
    created: 1641195562180
    name: Base environment
    data:
      base_url: '{{ scheme }}://{{ host }}{{ base_path }}'
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1641195562180
    _type: environment
  - _id: jar_e36ff964c604633ac012e67acde4790806dc20c8
    parentId: wrk_a255aeabb44240f5885e3360f9a6ee65
    modified: 1641195569855
    created: 1641195569855
    name: Default Jar
    cookies: []
    _type: cookie_jar
  - _id: spc_e6315f4190fe459784671aed112ad815
    parentId: wrk_a255aeabb44240f5885e3360f9a6ee65
    modified: 1641195565984
    created: 1641195565877
    fileName: Swagger Petstore - OpenAPI 3.0 1.0.9
    contents: >
      openapi: 3.0.2

      servers:
        - url: /v3
      info:
        description: |-
          This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
          Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
          You can now help us improve the API whether it's by making changes to the definition itself or to the code.
          That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

          Some useful links:
          - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
          - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
        version: 1.0.9
        title: Swagger Petstore - OpenAPI 3.0
        termsOfService: 'http://swagger.io/terms/'
        contact:
          email: apiteam@swagger.io
        license:
          name: Apache 2.0
          url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
      tags:
        - name: pet
          description: Everything about your Pets
          externalDocs:
            description: Find out more
            url: 'http://swagger.io'
        - name: store
          description: Access to Petstore orders
          externalDocs:
            description: Find out more about our store
            url: 'http://swagger.io'
        - name: user
          description: Operations about user
      paths:
        /pet:
          post:
            tags:
              - pet
            summary: Add a new pet to the store
            description: Add a new pet to the store
            operationId: addPet
            responses:
              '200':
                description: Successful operation
                content:
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/Pet'
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Pet'
              '405':
                description: Invalid input
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
            requestBody:
              description: Create a new pet in the store
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
                application/xml:
                  schema:
                    $ref: '#/components/schemas/Pet'
                application/x-www-form-urlencoded:
                  schema:
                    $ref: '#/components/schemas/Pet'
          put:
            tags:
              - pet
            summary: Update an existing pet
            description: Update an existing pet by Id
            operationId: updatePet
            responses:
              '200':
                description: Successful operation
                content:
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/Pet'
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Pet'
              '400':
                description: Invalid ID supplied
              '404':
                description: Pet not found
              '405':
                description: Validation exception
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
            requestBody:
              description: Update an existent pet in the store
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Pet'
                application/xml:
                  schema:
                    $ref: '#/components/schemas/Pet'
                application/x-www-form-urlencoded:
                  schema:
                    $ref: '#/components/schemas/Pet'
        /pet/findByStatus:
          get:
            tags:
              - pet
            summary: Finds Pets by status
            description: Multiple status values can be provided with comma separated strings
            operationId: findPetsByStatus
            parameters:
              - name: status
                in: query
                description: Status values that need to be considered for filter
                required: false
                explode: true
                schema:
                  type: string
                  enum:
                    - available
                    - pending
                    - sold
                  default: available
            responses:
              '200':
                description: successful operation
                content:
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Pet'
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Pet'
              '400':
                description: Invalid status value
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
        /pet/findByTags:
          get:
            tags:
              - pet
            summary: Finds Pets by tags
            description: >-
              Multiple tags can be provided with comma separated strings. Use tag1,
              tag2, tag3 for testing.
            operationId: findPetsByTags
            parameters:
              - name: tags
                in: query
                description: Tags to filter by
                required: false
                explode: true
                schema:
                  type: array
                  items:
                    type: string
            responses:
              '200':
                description: successful operation
                content:
                  application/xml:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Pet'
                  application/json:
                    schema:
                      type: array
                      items:
                        $ref: '#/components/schemas/Pet'
              '400':
                description: Invalid tag value
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
        '/pet/{petId}':
          get:
            tags:
              - pet
            summary: Find pet by ID
            description: Returns a single pet
            operationId: getPetById
            parameters:
              - name: petId
                in: path
                description: ID of pet to return
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              '200':
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/Pet'
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Pet'
              '400':
                description: Invalid ID supplied
              '404':
                description: Pet not found
            security:
              - api_key: []
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
          post:
            tags:
              - pet
            summary: Updates a pet in the store with form data
            description: ''
            operationId: updatePetWithForm
            parameters:
              - name: petId
                in: path
                description: ID of pet that needs to be updated
                required: true
                schema:
                  type: integer
                  format: int64
              - name: name
                in: query
                description: Name of pet that needs to be updated
                schema:
                  type: string
              - name: status
                in: query
                description: Status of pet that needs to be updated
                schema:
                  type: string
            responses:
              '405':
                description: Invalid input
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
          delete:
            tags:
              - pet
            summary: Deletes a pet
            description: ''
            operationId: deletePet
            parameters:
              - name: api_key
                in: header
                description: ''
                required: false
                schema:
                  type: string
              - name: petId
                in: path
                description: Pet id to delete
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              '400':
                description: Invalid pet value
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
        '/pet/{petId}/uploadImage':
          post:
            tags:
              - pet
            summary: uploads an image
            description: ''
            operationId: uploadFile
            parameters:
              - name: petId
                in: path
                description: ID of pet to update
                required: true
                schema:
                  type: integer
                  format: int64
              - name: additionalMetadata
                in: query
                description: Additional Metadata
                required: false
                schema:
                  type: string
            responses:
              '200':
                description: successful operation
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ApiResponse'
            security:
              - petstore_auth:
                  - 'write:pets'
                  - 'read:pets'
            requestBody:
              content:
                application/octet-stream:
                  schema:
                    type: string
                    format: binary
        /store/inventory:
          get:
            tags:
              - store
            summary: Returns pet inventories by status
            description: Returns a map of status codes to quantities
            operationId: getInventory
            x-swagger-router-controller: OrderController
            responses:
              '200':
                description: successful operation
                content:
                  application/json:
                    schema:
                      type: object
                      additionalProperties:
                        type: integer
                        format: int32
            security:
              - api_key: []
        /store/order:
          post:
            tags:
              - store
            summary: Place an order for a pet
            description: Place a new order in the store
            operationId: placeOrder
            x-swagger-router-controller: OrderController
            responses:
              '200':
                description: successful operation
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Order'
              '405':
                description: Invalid input
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Order'
                application/xml:
                  schema:
                    $ref: '#/components/schemas/Order'
                application/x-www-form-urlencoded:
                  schema:
                    $ref: '#/components/schemas/Order'
        '/store/order/{orderId}':
          get:
            tags:
              - store
            summary: Find purchase order by ID
            x-swagger-router-controller: OrderController
            description: >-
              For valid response try integer IDs with value <= 5 or > 10. Other values
              will generate exceptions.
            operationId: getOrderById
            parameters:
              - name: orderId
                in: path
                description: ID of order that needs to be fetched
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              '200':
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/Order'
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Order'
              '400':
                description: Invalid ID supplied
              '404':
                description: Order not found
          delete:
            tags:
              - store
            summary: Delete purchase order by ID
            x-swagger-router-controller: OrderController
            description: >-
              For valid response try integer IDs with value < 1000. Anything above
              1000 or nonintegers will generate API errors
            operationId: deleteOrder
            parameters:
              - name: orderId
                in: path
                description: ID of the order that needs to be deleted
                required: true
                schema:
                  type: integer
                  format: int64
            responses:
              '400':
                description: Invalid ID supplied
              '404':
                description: Order not found
        /user:
          post:
            tags:
              - user
            summary: Create user
            description: This can only be done by the logged in user.
            operationId: createUser
            responses:
              default:
                description: successful operation
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/User'
            requestBody:
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/User'
                application/xml:
                  schema:
                    $ref: '#/components/schemas/User'
                application/x-www-form-urlencoded:
                  schema:
                    $ref: '#/components/schemas/User'
              description: Created user object
        /user/createWithList:
          post:
            tags:
              - user
            summary: Creates list of users with given input array
            description: 'Creates list of users with given input array'
            x-swagger-router-controller: UserController
            operationId: createUsersWithListInput
            responses:
              '200':
                description: Successful operation
                content:
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/User'
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              default:
                description: successful operation
            requestBody:
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        /user/login:
          get:
            tags:
              - user
            summary: Logs user into the system
            description: ''
            operationId: loginUser
            parameters:
              - name: username
                in: query
                description: The user name for login
                required: false
                schema:
                  type: string
              - name: password
                in: query
                description: The password for login in clear text
                required: false
                schema:
                  type: string
            responses:
              '200':
                description: successful operation
                headers:
                  X-Rate-Limit:
                    description: calls per hour allowed by the user
                    schema:
                      type: integer
                      format: int32
                  X-Expires-After:
                    description: date in UTC when token expires
                    schema:
                      type: string
                      format: date-time
                content:
                  application/xml:
                    schema:
                      type: string
                  application/json:
                    schema:
                      type: string
              '400':
                description: Invalid username/password supplied
        /user/logout:
          get:
            tags:
              - user
            summary: Logs out current logged in user session
            description: ''
            operationId: logoutUser
            parameters: []
            responses:
              default:
                description: successful operation
        '/user/{username}':
          get:
            tags:
              - user
            summary: Get user by user name
            description: ''
            operationId: getUserByName
            parameters:
              - name: username
                in: path
                description: 'The name that needs to be fetched. Use user1 for testing. '
                required: true
                schema:
                  type: string
            responses:
              '200':
                description: successful operation
                content:
                  application/xml:
                    schema:
                      $ref: '#/components/schemas/User'
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              '400':
                description: Invalid username supplied
              '404':
                description: User not found
          put:
            tags:
              - user
            summary: Update user
            x-swagger-router-controller: UserController
            description: This can only be done by the logged in user.
            operationId: updateUser
            parameters:
              - name: username
                in: path
                description: name that need to be deleted
                required: true
                schema:
                  type: string
            responses:
              default:
                description: successful operation
            requestBody:
              description: Update an existent user in the store
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/User'
                application/xml:
                  schema:
                    $ref: '#/components/schemas/User'
                application/x-www-form-urlencoded:
                  schema:
                    $ref: '#/components/schemas/User'
          delete:
            tags:
              - user
            summary: Delete user
            description: This can only be done by the logged in user.
            operationId: deleteUser
            parameters:
              - name: username
                in: path
                description: The name that needs to be deleted
                required: true
                schema:
                  type: string
            responses:
              '400':
                description: Invalid username supplied
              '404':
                description: User not found
      externalDocs:
        description: Find out more about Swagger
        url: 'http://swagger.io'
      components:
        schemas:
          Order:
            x-swagger-router-model: io.swagger.petstore.model.Order
            properties:
              id:
                type: integer
                format: int64
                example: 10
              petId:
                type: integer
                format: int64
                example: 198772
              quantity:
                type: integer
                format: int32
                example: 7
              shipDate:
                type: string
                format: date-time
              status:
                type: string
                description: Order Status
                enum:
                  - placed
                  - approved
                  - delivered
                example: approved
              complete:
                type: boolean
            xml:
              name: order
            type: object
          Customer:
            properties:
              id:
                type: integer
                format: int64
                example: 100000
              username:
                type: string
                example: fehguy
              address:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
                xml:
                  wrapped: true
                  name: addresses
            xml:
              name: customer
            type: object
          Address:
            properties:
              street:
                type: string
                example: 437 Lytton
              city:
                type: string
                example: Palo Alto
              state:
                type: string
                example: CA
              zip:
                type: string
                example: 94301
            xml:
              name: address
            type: object
          Category:
            x-swagger-router-model: io.swagger.petstore.model.Category
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: Dogs
            xml:
              name: category
            type: object
          User:
            x-swagger-router-model: io.swagger.petstore.model.User
            properties:
              id:
                type: integer
                format: int64
                example: 10
              username:
                type: string
                example: theUser
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: James
              email:
                type: string
                example: john@email.com
              password:
                type: string
                example: 12345
              phone:
                type: string
                example: 12345
              userStatus:
                type: integer
                format: int32
                example: 1
                description: User Status
            xml:
              name: user
            type: object
          Tag:
            x-swagger-router-model: io.swagger.petstore.model.Tag
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
            xml:
              name: tag
            type: object
          Pet:
            x-swagger-router-model: io.swagger.petstore.model.Pet
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
                example: 10
              name:
                type: string
                example: doggie
              category:
                $ref: '#/components/schemas/Category'
              photoUrls:
                type: array
                xml:
                  wrapped: true
                items:
                  type: string
                  xml:
                    name: photoUrl
              tags:
                type: array
                xml:
                  wrapped: true
                items:
                  $ref: '#/components/schemas/Tag'
                  xml:
                    name: tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: pet
            type: object
          ApiResponse:
            properties:
              code:
                type: integer
                format: int32
              type:
                type: string
              message:
                type: string
            xml:
              name: '##default'
            type: object
        requestBodies:
          Pet:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Pet'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Pet'
            description: Pet object that needs to be added to the store
          UserArray:
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
            description: List of user object
        securitySchemes:
          petstore_auth:
            type: oauth2
            flows:
              implicit:
                authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
                scopes:
                  'write:pets': modify pets in your account
                  'read:pets': read your pets
          api_key:
            type: apiKey
            name: api_key
            in: header
    contentType: yaml
    _type: api_spec
  - _id: env_env_e36ff964c604633ac012e67acde4790806dc20c8_sub
    parentId: env_e36ff964c604633ac012e67acde4790806dc20c8
    modified: 1641196328832
    created: 1641195562181
    name: OpenAPI env
    data:
      scheme:
        - https
      base_path: /v3
      host: petstore3.swagger.io/api
      apiKey: apiKey
    dataPropertyOrder:
      '&':
        - scheme
        - base_path
        - host
        - apiKey
    color: null
    isPrivate: false
    metaSortKey: 1641195562181
    _type: environment
